"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .voice_v1_dialing_permissions_dialing_permissions_country import (
    VoiceV1DialingPermissionsDialingPermissionsCountry,
    VoiceV1DialingPermissionsDialingPermissionsCountryTypedDict,
)
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

LIST_DIALING_PERMISSIONS_COUNTRY_OP_SERVERS = [
    "https://voice.twilio.com",
]


class ListDialingPermissionsCountryRequestTypedDict(TypedDict):
    iso_code: NotRequired[str]
    r"""Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"""
    continent: NotRequired[str]
    r"""Filter to retrieve the country permissions by specifying the continent"""
    country_code: NotRequired[str]
    r"""Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)"""
    low_risk_numbers_enabled: NotRequired[bool]
    r"""Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`."""
    high_risk_special_numbers_enabled: NotRequired[bool]
    r"""Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`"""
    high_risk_tollfraud_numbers_enabled: NotRequired[bool]
    r"""Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`."""
    page_size: NotRequired[int]
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""
    page: NotRequired[int]
    r"""The page index. This value is simply for client state."""
    page_token: NotRequired[str]
    r"""The page token. This is provided by the API."""


class ListDialingPermissionsCountryRequest(BaseModel):
    iso_code: Annotated[
        Optional[str],
        pydantic.Field(alias="IsoCode"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"""

    continent: Annotated[
        Optional[str],
        pydantic.Field(alias="Continent"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter to retrieve the country permissions by specifying the continent"""

    country_code: Annotated[
        Optional[str],
        pydantic.Field(alias="CountryCode"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)"""

    low_risk_numbers_enabled: Annotated[
        Optional[bool],
        pydantic.Field(alias="LowRiskNumbersEnabled"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`."""

    high_risk_special_numbers_enabled: Annotated[
        Optional[bool],
        pydantic.Field(alias="HighRiskSpecialNumbersEnabled"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`"""

    high_risk_tollfraud_numbers_enabled: Annotated[
        Optional[bool],
        pydantic.Field(alias="HighRiskTollfraudNumbersEnabled"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`."""

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="PageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""

    page: Annotated[
        Optional[int],
        pydantic.Field(alias="Page"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The page index. This value is simply for client state."""

    page_token: Annotated[
        Optional[str],
        pydantic.Field(alias="PageToken"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The page token. This is provided by the API."""


class ListDialingPermissionsCountryMetaTypedDict(TypedDict):
    first_page_url: NotRequired[str]
    key: NotRequired[str]
    next_page_url: NotRequired[Nullable[str]]
    page: NotRequired[int]
    page_size: NotRequired[int]
    previous_page_url: NotRequired[Nullable[str]]
    url: NotRequired[str]


class ListDialingPermissionsCountryMeta(BaseModel):
    first_page_url: Optional[str] = None

    key: Optional[str] = None

    next_page_url: OptionalNullable[str] = UNSET

    page: Optional[int] = None

    page_size: Optional[int] = None

    previous_page_url: OptionalNullable[str] = UNSET

    url: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "first_page_url",
            "key",
            "next_page_url",
            "page",
            "page_size",
            "previous_page_url",
            "url",
        ]
        nullable_fields = ["next_page_url", "previous_page_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListDialingPermissionsCountryListDialingPermissionsCountryResponseTypedDict(
    TypedDict
):
    r"""OK"""

    content: NotRequired[
        List[VoiceV1DialingPermissionsDialingPermissionsCountryTypedDict]
    ]
    meta: NotRequired[ListDialingPermissionsCountryMetaTypedDict]


class ListDialingPermissionsCountryListDialingPermissionsCountryResponse(BaseModel):
    r"""OK"""

    content: Optional[List[VoiceV1DialingPermissionsDialingPermissionsCountry]] = None

    meta: Optional[ListDialingPermissionsCountryMeta] = None


class ListDialingPermissionsCountryResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ListDialingPermissionsCountryListDialingPermissionsCountryResponseTypedDict


class ListDialingPermissionsCountryResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ListDialingPermissionsCountryListDialingPermissionsCountryResponse
