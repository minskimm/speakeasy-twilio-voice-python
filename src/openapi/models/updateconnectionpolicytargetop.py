"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .voice_v1_connection_policy_connection_policy_target import (
    VoiceV1ConnectionPolicyConnectionPolicyTarget,
    VoiceV1ConnectionPolicyConnectionPolicyTargetTypedDict,
)
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

UPDATE_CONNECTION_POLICY_TARGET_OP_SERVERS = [
    "https://voice.twilio.com",
]


class UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequestTypedDict(
    TypedDict
):
    friendly_name: NotRequired[str]
    r"""A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long."""
    target: NotRequired[str]
    r"""The SIP address you want Twilio to route your calls to. This must be a `sip:` schema. `sips` is NOT supported."""
    priority: NotRequired[int]
    r"""The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target."""
    weight: NotRequired[int]
    r"""The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority."""
    enabled: NotRequired[bool]
    r"""Whether the Target is enabled."""


class UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest(BaseModel):
    friendly_name: Annotated[
        Optional[str], pydantic.Field(alias="FriendlyName"), FieldMetadata(form=True)
    ] = None
    r"""A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long."""

    target: Annotated[
        Optional[str], pydantic.Field(alias="Target"), FieldMetadata(form=True)
    ] = None
    r"""The SIP address you want Twilio to route your calls to. This must be a `sip:` schema. `sips` is NOT supported."""

    priority: Annotated[
        Optional[int], pydantic.Field(alias="Priority"), FieldMetadata(form=True)
    ] = None
    r"""The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target."""

    weight: Annotated[
        Optional[int], pydantic.Field(alias="Weight"), FieldMetadata(form=True)
    ] = None
    r"""The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority."""

    enabled: Annotated[
        Optional[bool], pydantic.Field(alias="Enabled"), FieldMetadata(form=True)
    ] = None
    r"""Whether the Target is enabled."""


class UpdateConnectionPolicyTargetRequestTypedDict(TypedDict):
    connection_policy_sid: str
    r"""The SID of the Connection Policy that owns the Target."""
    sid: str
    r"""The unique string that we created to identify the Target resource to update."""
    request_body: NotRequired[
        UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequestTypedDict
    ]


class UpdateConnectionPolicyTargetRequest(BaseModel):
    connection_policy_sid: Annotated[
        str,
        pydantic.Field(alias="ConnectionPolicySid"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The SID of the Connection Policy that owns the Target."""

    sid: Annotated[
        str,
        pydantic.Field(alias="Sid"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The unique string that we created to identify the Target resource to update."""

    request_body: Annotated[
        Optional[UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest],
        FieldMetadata(
            request=RequestMetadata(media_type="application/x-www-form-urlencoded")
        ),
    ] = None


class UpdateConnectionPolicyTargetResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: VoiceV1ConnectionPolicyConnectionPolicyTargetTypedDict


class UpdateConnectionPolicyTargetResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: VoiceV1ConnectionPolicyConnectionPolicyTarget
