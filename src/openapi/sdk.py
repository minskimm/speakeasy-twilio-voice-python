"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from openapi import models, utils
from openapi._hooks import SDKHooks
from openapi.types import OptionalNullable, UNSET
from openapi.voicev1archivedcall import VoiceV1ArchivedCall
from openapi.voicev1bulkcountryupdate import VoiceV1BulkCountryUpdate
from openapi.voicev1byoctrunk_sdk import VoiceV1ByocTrunkSDK
from openapi.voicev1connectionpolicy_sdk import VoiceV1ConnectionPolicySDK
from openapi.voicev1connectionpolicytarget import VoiceV1ConnectionPolicyTarget
from openapi.voicev1country import VoiceV1Country
from openapi.voicev1highriskspecialprefix import VoiceV1HighriskSpecialPrefix
from openapi.voicev1iprecord_sdk import VoiceV1IPRecordSDK
from openapi.voicev1settings import VoiceV1Settings
from openapi.voicev1sourceipmapping_sdk import VoiceV1SourceIPMappingSDK
from typing import Callable, Dict, Optional, Union, cast
import weakref


class SDK(BaseSDK):
    r"""Twilio - Voice: This is the public Twilio REST API."""

    voice_v1_archived_call: VoiceV1ArchivedCall
    voice_v1_byoc_trunk: VoiceV1ByocTrunkSDK
    voice_v1_connection_policy: VoiceV1ConnectionPolicySDK
    voice_v1_connection_policy_target: VoiceV1ConnectionPolicyTarget
    voice_v1_country: VoiceV1Country
    voice_v1_bulk_country_update: VoiceV1BulkCountryUpdate
    voice_v1_highrisk_special_prefix: VoiceV1HighriskSpecialPrefix
    voice_v1_settings: VoiceV1Settings
    voice_v1_ip_record: VoiceV1IPRecordSDK
    voice_v1_source_ip_mapping: VoiceV1SourceIPMappingSDK

    def __init__(
        self,
        security: Union[models.Security, Callable[[], models.Security]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.async_client,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.voice_v1_archived_call = VoiceV1ArchivedCall(self.sdk_configuration)
        self.voice_v1_byoc_trunk = VoiceV1ByocTrunkSDK(self.sdk_configuration)
        self.voice_v1_connection_policy = VoiceV1ConnectionPolicySDK(
            self.sdk_configuration
        )
        self.voice_v1_connection_policy_target = VoiceV1ConnectionPolicyTarget(
            self.sdk_configuration
        )
        self.voice_v1_country = VoiceV1Country(self.sdk_configuration)
        self.voice_v1_bulk_country_update = VoiceV1BulkCountryUpdate(
            self.sdk_configuration
        )
        self.voice_v1_highrisk_special_prefix = VoiceV1HighriskSpecialPrefix(
            self.sdk_configuration
        )
        self.voice_v1_settings = VoiceV1Settings(self.sdk_configuration)
        self.voice_v1_ip_record = VoiceV1IPRecordSDK(self.sdk_configuration)
        self.voice_v1_source_ip_mapping = VoiceV1SourceIPMappingSDK(
            self.sdk_configuration
        )

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.client is not None:
            self.sdk_configuration.client.close()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.async_client is not None:
            await self.sdk_configuration.async_client.aclose()
